cmake_minimum_required(VERSION 2.8)
option(H3 "H3 platform" false)

set(CMAKE_SYSTEM_NAME Linux)
if(CMAKE_TARGET_ARCH STREQUAL "armv7")
    set(IS_ARMV7 TRUE)
elseif(CMAKE_TARGET_ARCH STREQUAL "aarch64")
    set(IS_ARM64 TRUE)
endif()

if(IS_ARMV7)
    set(CMAKE_C_COMPILER   /home/pengcuo/buff/android-toolchains/armv7-4.8/bin/arm-linux-androideabi-gcc)
    set(CMAKE_CXX_COMPILER   /home/pengcuo/buff/android-toolchains/armv7-4.8/bin/arm-linux-androideabi-g++)
    link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/lib)
elseif(IS_ARM64)
    if(H3)
      set(CMAKE_CXX_COMPILER aarch64-linux-gnu-g++-7)
      set(CMAKE_C_COMPILER aarch64-linux-gnu-gcc-7)
      link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/lib64/h3)
    else()
      set(CMAKE_C_COMPILER /home/pengcuo/buff/android-toolchains/android-21/arm64_gnustl/bin/aarch64-linux-android-clang)
      set(CMAKE_CXX_COMPILER /home/pengcuo/buff/android-toolchains/android-21/arm64_gnustl/bin/aarch64-linux-android-clang++)
      link_directories(${CMAKE_CURRENT_SOURCE_DIR}/lib/lib64)
    endif()
else()
    link_directories(/usr/local/cuda/lib64)
endif()

project (test_snpe_)
message(STATUS "cmake_c_compiler -> ${CMAKE_C_COMPILER}")
message(STATUS "cmake_cxx_compiler -> ${CMAKE_CXX_COMPILER}")
message(STATUS "current_source_dir -> ${CMAKE_CURRENT_SOURCE_DIR}")
message(STATUS "cmake_sysroot -> ${CMAKE_SYSROOT}")
set(CMAKE_CXX_FLAGS "-pie -fPIC -std=c++11 ${CMAKE_CXX_FLAGS}")

if(IS_ARM64)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include/zdl)
  file(GLOB_RECURSE SNPE_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)
  message(STATUS "snpe_srcs -> ${SNPE_SRCS}")
else()
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/armv7-include)
  include_directories(${CMAKE_CURRENT_SOURCE_DIR}/armv7-include/zdl)
  file(GLOB_RECURSE SNPE_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/armv7-src/*.cpp)
  message(STATUS "snpe_srcs -> ${SNPE_SRCS}")
endif()


add_executable("test_snpe" ${SNPE_SRCS})
target_link_libraries("test_snpe" SNPE)
#target_link_libraries("test_snpe", SNPE symphony-cpu symphonypower)
#foreach(GEMM_SRC ${SNPE_SRCS})
#    message(STATUS "snpe_src -> ${GEMM_SRC}")
#    file(RELATIVE_PATH SRC_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/ ${GEMM_SRC})
#    string(REPLACE ".cpp" "" GEMM_NAME ${SRC_FILE})
#    message(STATUS "snpe_name -> ${GEMM_NAME}")
#    add_executable(${GEMM_NAME}_${CMAKE_TARGET_ARCH} ${GEMM_SRC})
#    target_link_libraries(${GEMM_NAME}_${CMAKE_TARGET_ARCH} OpenCL)
#endforeach()
